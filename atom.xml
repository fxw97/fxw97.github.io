<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fxw97.github.io/</id>
    <title>fxw personal blog</title>
    <updated>2022-07-04T08:29:23.862Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fxw97.github.io/"/>
    <link rel="self" href="https://fxw97.github.io/atom.xml"/>
    <subtitle>&lt;subtitle&gt;个人站点，记录学习、工作、生活及兴趣爱好。&lt;subtitle&gt;</subtitle>
    <logo>https://fxw97.github.io/images/avatar.png</logo>
    <icon>https://fxw97.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, fxw personal blog</rights>
    <entry>
        <title type="html"><![CDATA[全国第七次人口普查数据可视化—基于geopandas]]></title>
        <id>https://fxw97.github.io/post/geopandas-2/</id>
        <link href="https://fxw97.github.io/post/geopandas-2/">
        </link>
        <updated>2022-07-04T08:26:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="全国第七次人口普查数据可视化基于geopandas">全国第七次人口普查数据可视化—基于geopandas</h1>
<p><strong>—geopandas地图插值</strong></p>
<h2 id="内容概要">内容概要</h2>
<p>第七次全国人口普查，是中国在2020年开展的全国人口普查。普查标准时点是2020年11月1日零时，彻查人口出生变动情况以及房屋情况。2021年5月11日，第七次全国人口普查结果公布，全国人口(不含港，澳，台)共1411778724人。本案例将介绍如何使用<em>geopandas</em>可视化全国各省级单位(不含港澳台)的最新人口数据。需要本案例数据和完整代码的于公众号后台回复<em>20220704</em>即可。</p>
<hr>
<h2 id="数据处理">数据处理</h2>
<p>人口数据来源为红黑人口库网站https://www.hongheiku.com/公布的全国第七次人口普查中各省份的人口数据。<br>
导入使用的库，读取各省份人口数据。</p>
<pre><code class="language-Python">import geopandas as gpd
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# 修改绘图字体 
plt.rcParams['font.sans-serif'] = 'Microsoft YaHei' 
# 使打印输出显示更全
pd.set_option('display.max_columns',500)
pd.set_option('display.width',1000)

pop_data = pd.read_excel('第七次人口普查数据.xlsx')
print(pop_data)
</code></pre>
<p>输出：<br>
<img src="https://fxw97.github.io//post-images/1656923225137.png" alt="" loading="lazy"></p>
<p>读取用于绘制中国地图的地理信息数据。</p>
<pre><code class="language-Python">df = gpd.read_file('中华人民共和国.json')
print(df)
</code></pre>
<p>输出：<br>
<img src="https://fxw97.github.io//post-images/1656923241714.png" alt="" loading="lazy"></p>
<p>从数据输出可以看出，人口数据中各省份命名方式为简写，而地理信息数据中命名方式为全称。为了将各省份人口数据映射到对应地理信息数据中，我们需要将省份名称统一，然后将人口和地理信息数据进行合并，并转换为geopandas能识别的GeoDataFrame格式。</p>
<pre><code class="language-Python"># 将地理信息数据中的省份名称与人口数据中的省份名称改为一致
df['name'] = ['北京','天津','河北','山西','内蒙古','辽宁','吉林','黑龙江',
              '上海','江苏','浙江','安徽','福建','江西','山东','河南',
              '湖北','湖南','广东','广西','海南','重庆','四川','贵州',
              '云南','西藏','陕西','甘肃','青海','宁夏','新疆','台湾','香港','澳门',np.nan]
data_with_geometry = pd.merge(left=df,right=pop_data,left_on='name',right_on='地区',how='left')
data_with_geometry = gpd.GeoDataFrame(data_with_geometry, crs='EPSG:4326')
print(data_with_geometry)
</code></pre>
<p>输出：<br>
<img src="https://fxw97.github.io//post-images/1656923250271.png" alt="" loading="lazy"><br>
从输出可以看出，每个省份的地理信息数据已经与人口数据相关联。接下来便可使用geopandas对地理信息数据进行可视化，并使用人口数据作为映射。</p>
<hr>
<h2 id="可视化">可视化</h2>
<p>使用geopandas对处理好的GeoDataFrame数据进行可视化。</p>
<pre><code class="language-Python">fig,ax = plt.subplots(figsize=(8,8))
# 绘图
data_with_geometry.plot(ax=ax,column='人口数',
                        cmap='YlGnBu',
                        missing_kwds={&quot;color&quot;: &quot;grey&quot;,
                                      &quot;edgecolor&quot;: &quot;black&quot;,
                                      'label':'缺失值'},
                        legend=True,
                        scheme='natural_breaks',
                        k=6,
                        legend_kwds={
                            'loc': 'lower left',
                            'title': '人口数量分级',
                            'shadow': True,
                            'interval': True,
                            'fmt':'{:.2e}',
                            'bbox_to_anchor':(0.1,0.1),
                            'fontsize': 8})
# 设置轴刻度为经纬度
ax.set_xticks(range(80,140,10),[str(x)+'°E' for x in range(80,140,10)])
ax.set_yticks(range(10,60,10),[str(x)+'°N' for x in range(10,60,10)])
# 添加经纬度网格线
ax.grid(ls='--',alpha=0.5)
# 添加图名
plt.title('中国第七次人口普查数据分布(2021年)',fontsize=18)
plt.tight_layout()
plt.savefig('1.第七次人口普查.jpg',dpi=600)
plt.show()
</code></pre>
<p>输出并保存的地图：<br>
<img src="https://fxw97.github.io//post-images/1656923258850.jpg" alt="" loading="lazy"><br>
以上便是使用geopandas对全国第七次人口普查数据可视化的完整过程及相应代码。整个地图绘制过程十分简单，不由得再次被geopandas的强大所惊艳到。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[R语言可视化:基础折线图]]></title>
        <id>https://fxw97.github.io/post/R-visualization2/</id>
        <link href="https://fxw97.github.io/post/R-visualization2/">
        </link>
        <updated>2022-06-27T23:19:27.000Z</updated>
        <content type="html"><![CDATA[<h1 id="r语言可视化基础折线图">R语言可视化:基础折线图</h1>
<p><strong>—ggplot2绘制基础折线图</strong></p>
<h2 id="内容概要">内容概要</h2>
<p>折线图常用与展示数据的连续变化趋势。本期内容将介绍如何使用 R 语言的 ggplot2 包来绘制折线图，并对折线图进行自定义美化。使用的示例数据集是 2022 年 5 月广州市 PM2.5 和 PM10 日均浓度数据，绘制折线图来展示 PM2.5 和 PM10 日均浓度变化趋势。需要本案例数据和完整代码的于公众号后台回复<strong>20220626-2</strong>即可。</p>
<hr>
<h2 id="绘图数据">绘图数据</h2>
<p>导入 tidyverse 包，读取绘图数据：</p>
<pre><code class="language-R">library(tidyverse)
df &lt;- read.csv('Lineplot/广州市监测站5月数据.csv')
df

# 添加day日期列
df &lt;- df %&gt;% mutate(day=seq(1,31,1))
df
</code></pre>
<p>输出：<br>
<img src="https://fxw97.github.io//post-images/1656372855885.png" alt="" loading="lazy"><br>
数据包含时间列，添加的日期列，PM2.5 和 PM10 日均浓度列。</p>
<p>接下里将原始宽数据，转换为 ggplot2 绘图所需的长数据：</p>
<pre><code class="language-R"># 将宽数据转换为ggplot2绘图的长数据
df &lt;- df %&gt;% pivot_longer(cols=c(PM2_5:PM10),names_to = 'species',values_to = 'con')
df
</code></pre>
<h2 id="输出">输出：<br>
<img src="https://fxw97.github.io//post-images/1656372864225.png" alt="" loading="lazy"></h2>
<h2 id="绘图代码">绘图代码</h2>
<p>使用 ggplot2 绘制折线图，保存到 P1：</p>
<pre><code class="language-R"># 绘图
p1 &lt;- ggplot(df,aes(x=day,y=con,colour=species))+geom_line(size=1)
p1
</code></pre>
<p>p1 输出结果：<br>
<img src="https://fxw97.github.io//post-images/1656372872870.jpg" alt="" loading="lazy"></p>
<p>添加 x，y 轴的轴名，保存到 p2：</p>
<pre><code class="language-R">p2 &lt;- p1+labs(x='2022年5月',y=expression(浓度μg/m^'3'))
p2
</code></pre>
<p>p2 输出结果：<br>
<img src="https://fxw97.github.io//post-images/1656372880112.jpg" alt="" loading="lazy"><br>
修改 x，y 轴范围，设置 x 轴刻度，保存到 p3：</p>
<pre><code class="language-R">p3 &lt;- p2+scale_x_continuous(limits=c(1,31),breaks=seq(1,31,1))+ylim(0,70)
p3
</code></pre>
<p>p3 输出结果：<br>
<img src="https://fxw97.github.io//post-images/1656372886349.jpg" alt="" loading="lazy"></p>
<p>修改 x 轴刻度线和图例，保存到 p4：</p>
<pre><code class="language-R">p4 &lt;- p3+theme(axis.ticks.length = unit(-0.1,'cm'), # 设置刻度线朝内
               axis.text.x = element_text(margin = unit(c(0.25,0.25,0.5,0.5),'cm'),size=10),
               panel.grid.minor = element_blank())+ # 取消次刻度网格线
  guides(colour=guide_legend(title=NULL))+
  scale_color_discrete(labels=c(expression(PM[10]),expression(PM[2.5]))) # 设置下标
p4
</code></pre>
<p>p4 输出结果:<br>
<img src="https://fxw97.github.io//post-images/1656372894216.jpg" alt="" loading="lazy"><br>
代码中<code>expression(PM[10]),expression(PM[2.5])和expression(浓度μg/m^'3')</code>是 ggplot2 绘图时设置下标和上标的方法，在绘图美化时会经常使用到。</p>
<p>完整代码和绘制保存到本地电脑的折线图：</p>
<pre><code class="language-R">library(tidyverse)
df &lt;- read.csv('Lineplot/广州市监测站5月数据.csv')
df

# 添加day日期列
df &lt;- df %&gt;% mutate(day=seq(1,31,1))
df

# 将宽数据转换为ggplot2绘图的长数据
df &lt;- df %&gt;% pivot_longer(cols=c(PM2_5:PM10),names_to = 'species',values_to = 'con')
df

# 绘图
p1 &lt;- ggplot(df,aes(x=day,y=con,colour=species))+geom_line(size=1)
p1

# 添加x,y轴名称
p2 &lt;- p1+labs(x='2022年5月',
              y=expression(浓度μg/m^'3'))
p2

# 修改x,y轴范围，设置x刻度
p3 &lt;- p2+scale_x_continuous(limits=c(1,31),breaks=seq(1,31,1))+ylim(0,70)
p3

# 修改x轴刻度线和图例
p4 &lt;- p3+theme(axis.ticks.length = unit(-0.1,'cm'), # 设置刻度线朝内
               axis.text.x = element_text(margin = unit(c(0.25,0.25,0.5,0.5),'cm'),size=10),
               panel.grid.minor = element_blank())+ # 取消次刻度网格线
  guides(colour=guide_legend(title=NULL))+
  scale_color_discrete(labels=c(expression(PM[10]),expression(PM[2.5]))) # 设置下标
p4

# 保存折线图
ggsave('Lineplot/Lineplot4.jpg',plot=p4,width=8.0,height=4.1,dpi=900) #单位默认为in，英尺
ggsave('Lineplot/Lineplot3.jpg',plot=p3,width=8.0,height=4.1,dpi=900)
ggsave('Lineplot/Lineplot2.jpg',plot=p2,width=8.0,height=4.1,dpi=900)
ggsave('Lineplot/Lineplot1.jpg',plot=p1,width=8.0,height=4.1,dpi=900)
</code></pre>
<p>保存到本地电脑的 p1-p4 折线图:<br>
<img src="https://fxw97.github.io//post-images/1656372905306.jpg" alt="" loading="lazy"><br>
<img src="https://fxw97.github.io//post-images/1656372910705.jpg" alt="" loading="lazy"><br>
<img src="https://fxw97.github.io//post-images/1656372915132.jpg" alt="" loading="lazy"><br>
<img src="https://fxw97.github.io//post-images/1656372919301.jpg" alt="" loading="lazy"></p>
<p>以上便是使用 ggplot2 绘制基础折线图的相关内容，可结合同期推文—Python 可视化：基础折线图，来同时对比学习使用 matplotlib 绘制折线图。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python可视化:基础折线图]]></title>
        <id>https://fxw97.github.io/post/python-visualization2/</id>
        <link href="https://fxw97.github.io/post/python-visualization2/">
        </link>
        <updated>2022-06-27T23:17:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="python可视化基础折线图">Python可视化:基础折线图</h1>
<p><strong>—matplotlib绘制基础折线图</strong></p>
<h2 id="内容概要">内容概要</h2>
<p>折线图常用与展示数据的连续变化趋势。本期内容将介绍如何使用 matplotlib 绘制折线图，并对折线图进行自定义美化。使用的示例数据集是 2022 年 5 月广州市 PM2.5 和 PM10 日均浓度数据，绘制折线图来展示 PM2.5 和 PM10 日均浓度变化趋势。需要本案例数据和完整代码的于公众号后台回复<strong>20220626-1</strong>即可。</p>
<hr>
<h2 id="绘图数据">绘图数据</h2>
<p>导入 pandas 和 matplotlib 库。使用 pandas 读取绘图数据，数据组成如下：</p>
<pre><code class="language-Python">import pandas as pd
import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] = 'Microsoft YaHei'
df = pd.read_csv('广州市监测站5月数据.csv')
print(df)
</code></pre>
<p>数据组成：<br>
<img src="https://fxw97.github.io//post-images/1656372811827.png" alt="" loading="lazy"><br>
数据包括 2022 年 5 月份的日期，及每天对应的 PM2.5 和 PM10 的日均浓度。</p>
<hr>
<h2 id="绘图代码">绘图代码</h2>
<p>对 PM2.5 和 PM10 日均浓度时间序列数据进行可视化：</p>
<pre><code class="language-Python">plt.figure(figsize=(10,5))
x = pd.to_datetime(df['Time'])
y1 = df['PM2_5']
y2 = df['PM10']

plt.plot(x,y1,linewidth=2,label='PM${_2}$${_.}$${_5}$')
plt.plot(x,y2,linewidth=2,label='PM${_1}$${_0}$')
</code></pre>
<p>matplotlib 输出的原始线图:<br>
<img src="https://fxw97.github.io//post-images/1656372823552.png" alt="" loading="lazy"><br>
代码中<code>label='PM${_2}$${_.}$${_5}$'</code>和<code>label='PM${_1}$${_0}$'</code>，是 matplotlib 修改指定的字符串为下标的方法<code>${_str}$</code>，修改字符串为上标的方法为<code>${^str}$</code>。修改上下标在 matplotlib 绘图美化时会经常用到。</p>
<p>接下里进一步对折线图进行美化，包括增加 x,y 轴的轴名、修改 x 轴刻度标签、增加网格线和图例等：<br>
​</p>
<pre><code class="language-Python">plt.plot(x,y1,linewidth=2,label='PM2.5')
plt.plot(x,y2,linewidth=2,label='PM10')
plt.xticks(x, x.dt.day)
plt.tick_params(axis='both',direction='in')
plt.ylim(0,70)
plt.xlabel('2022年5月',fontsize=12)
plt.ylabel('浓度(μg/m${^3}$)',fontsize=12)
plt.grid(ls='--',alpha=0.4)
plt.legend(frameon=False)
​
plt.tight_layout()
plt.savefig('1.lineplot.png',dpi=600) # 将折线图保存到本地电脑
plt.show()
</code></pre>
<p>​<br>
最终输出保存的折线图:<br>
<img src="https://fxw97.github.io//post-images/1656372832546.png" alt="" loading="lazy"><br>
​<br>
完整绘图代码如下：</p>
<pre><code class="language-Python">import pandas as pd
import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] = 'Microsoft YaHei'
df = pd.read_csv('广州市监测站5月数据.csv')
print(df)
​
plt.figure(figsize=(10,5))
x = pd.to_datetime(df['Time'])
y1 = df['PM2_5']
y2 = df['PM10']
plt.plot(x,y1,linewidth=2,label='PM${_2}$${_.}$${_5}$')
plt.plot(x,y2,linewidth=2,label='PM${_1}$${_0}$')
plt.xticks(x, x.dt.day)
plt.tick_params(axis='both',direction='in') # 设置刻度线朝内
plt.ylim(0,70)
plt.xlabel('2022年5月',fontsize=12)
plt.ylabel('浓度(μg/m${^3}$)',fontsize=12)
plt.grid(ls='--',alpha=0.4)
plt.legend(frameon=False) # 添加图例并取消边框
plt.tight_layout()
plt.savefig('1.lineplot.png',dpi=600)
plt.show()
</code></pre>
<p>以上便是使用 matplotlib 绘制基础折线图的相关内容，可结合同期推文—R 语言可视化：基础折线图，来同时对比学习使用 ggplot2 绘制折线图。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[R 语言可视化: 基础散点图]]></title>
        <id>https://fxw97.github.io/post/R-visualizatin1/</id>
        <link href="https://fxw97.github.io/post/R-visualizatin1/">
        </link>
        <updated>2022-06-27T23:14:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="r-语言可视化-基础散点图">R 语言可视化: 基础散点图</h1>
<p><strong>—ggplot2 绘制基础散点图</strong></p>
<h2 id="内容概要">内容概要</h2>
<p>散点图常用来描述两个连续型变量间的关系，本期内容将介绍使用 R 语言的绘图包<strong>ggplot2</strong>绘制基础散点图，并展开介绍如何对散点图进行美化。ggplot2 强大的绘图能力，是促使我学习 R 语言的原因!!!使用的示例数据集是 penguins，数据包含了不同种类企鹅的嘴长度和嘴厚度，我们拟对不同种类企鹅的嘴、和嘴厚进行绘制散点图，来探究企鹅嘴长与嘴厚度之间是否有联系。需要本案例数据和完整代码的于公众号后台回复<strong>20220614-2</strong>即可。</p>
<hr>
<h2 id="作图数据">作图数据</h2>
<p>导入 tidyverse 和 ggplot2 包，读取原始数据。没有 tidyverse 包的，需要在 Rstudio 中使用命令 install.packages('tidyverse')安装。<strong>若读取数据时显示调用失败，则需要先在电脑中安装 Rtool(最近我遇到的一个坑)，再重新安装 tidyverse 包即可。</strong></p>
<pre><code class="language-R">library(tidyverse)
library(ggplot2)
df &lt;- read.csv('scatterplot/penguins.csv')
df
</code></pre>
<p>Rstudio 中输出原始数据组成如下:<br>
<img src="https://fxw97.github.io//post-images/1656372721946.jpg" alt="" loading="lazy"></p>
<p>剔除缺失值，获取作图数据集 df，并设置作图字体为 Calibri：</p>
<pre><code class="language-R">df &lt;- drop_na(df)
windowsFonts(Calibri=windowsFont('Calibri'))
</code></pre>
<h2 id="作图代码">作图代码</h2>
<p>使用 ggplot2，进行绘制散点图，ggplot()函数中绘图数据集为 df，映射 aes()中 x 轴为企鹅嘴长数据，y 轴为企鹅嘴宽数据，按照不同种类来区分颜色；几何形状使用 geom_point()设置为点，用于绘制散点图，散点大小设置为 3。有了绘图数据、映射和几何形状，即可完成绘制一幅基础图形，将图形保存为 p1。</p>
<pre><code class="language-R"># 企鹅嘴长和嘴厚的关系散点图
p1 &lt;- ggplot(df,mapping = aes(x=bill_length_mm,
                              y = bill_depth_mm,
                              color=species))+
  geom_point(size=3)
p1
</code></pre>
<p>p1 绘图结果:<br>
<img src="https://fxw97.github.io//post-images/1656372731543.jpg" alt="" loading="lazy"></p>
<p>后续可对 p1 进一步美化修饰，完成自己心目中的理想绘图目标(否管结果如何，先从过程中逐步学习和积累知识)。ggplot2 的默认绘图图表，我个人认为偏商业特色，这里修改 p1 默认主题为 theme_bw(),使其更贴近于学术图表，并对网格线进行了自定义设置，最后将修改后的图保存到 p2:</p>
<pre><code class="language-R">p2 &lt;- p1+
  theme_bw()+
  theme(panel.grid=element_line(linetype='dashed',colour = 'grey80'), #设置网格线为虚线,修改颜色
        panel.grid.minor = element_blank()) # 取消次刻度网格线
p2
</code></pre>
<p>p2 绘图结果:<br>
<img src="https://fxw97.github.io//post-images/1656372739483.jpg" alt="" loading="lazy"></p>
<p>接下来，使用绘图时常用的一些自定义美化过程对 p2 进行修改，并保存到 p3，包括以下部分:</p>
<ol>
<li>自定义 x 轴和 y 轴名称</li>
<li>修改轴名字体粗细或斜体、字体颜色和字体大小</li>
<li>修改轴刻度字体类型和大小</li>
<li>修改轴线宽度</li>
<li>修改图例标题字体大小</li>
<li>修改图例中字体大小</li>
<li>修改图例位置</li>
<li>修改图例背景，使其透明化</li>
</ol>
<pre><code class="language-R">p3 &lt;- p2+
  xlab('企鹅嘴长(mm)')+  #第1部分
  ylab('企鹅嘴厚(mm)')+
  theme(axis.title=element_text(face='bold',colour = 'purple',size=15),#第2部分
        axis.text=element_text(family='Calibri',size=13), #第3部分
        panel.border = element_rect(size=1), #第4部分
        legend.title = element_text(size=13,face='bold'),#第5部分
        legend.text=element_text(size=12), #第6部分
        legend.position = c(0.90,0.85),#第7部分
        legend.background = element_blank(),legend.key=element_blank())#第8部分
p3
</code></pre>
<p>P3 绘图结果：<br>
<img src="https://fxw97.github.io//post-images/1656372747421.jpg" alt="" loading="lazy"></p>
<p>观察 p3 发现绘图区域比较拥挤，我们可以加大 x 轴和 y 轴的刻度范围，使图形更加紧促，修改后保存到 p4 中。xlim()和 scale_x_continuous()均可修改 x 轴范围，但后者可使用 breaks 和 labels 等参数自定义刻度线标签内容，十分方便，所以推荐学会使用后者。对于 ylim()和 scale_x_continuous()同理而言。</p>
<pre><code class="language-R"># 设置x和y轴范围和刻度
p4 &lt;- p3+scale_x_continuous(limits=c(25,65),breaks=seq(25,65,5))+ylim(10,25)
p4
</code></pre>
<p>p4 绘图结果:<br>
<img src="https://fxw97.github.io//post-images/1656372757438.jpg" alt="" loading="lazy"></p>
<p>最后使用ggsave()将绘制的p1,p2,p3和p4保存到本地：</p>
<pre><code class="language-R">#宽度高度单位默认为in，英尺
ggsave('scatterplot/scatterp4.jpg',plot=p4,width=8.0,height=5.24,dpi=900)
ggsave('scatterplot/scatterp3.jpg',plot=p3,width=8.0,height=5.24,dpi=900)
ggsave('scatterplot/scatterp2.jpg',plot=p2,width=8.0,height=5.24,dpi=900)
ggsave('scatterplot/scatterp1.jpg',plot=p1,width=8.0,height=5.24,dpi=900)
</code></pre>
<p>从p1到p4，我们逐步对散点图进行了自定义美化，这里将绘图结果汇总展示，便于显现我们的对图形进行了哪些具体修改，之后读者有相应需求时去找对应步骤的代码即可:<br>
<img src="https://fxw97.github.io//post-images/1656372768245.jpg" alt="" loading="lazy"><br>
<img src="https://fxw97.github.io//post-images/1656372773769.jpg" alt="" loading="lazy"><br>
<img src="https://fxw97.github.io//post-images/1656372778837.jpg" alt="" loading="lazy"><br>
<img src="https://fxw97.github.io//post-images/1656372783558.jpg" alt="" loading="lazy"></p>
<p>以上便是使用 ggplot2 绘制基础散点图的相关内容，可结合同期推文—Python 可视化：基础散点图，来同时对比学习使用 matplotlib 绘制散点图。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python可视化:基础散点图]]></title>
        <id>https://fxw97.github.io/post/python-visualization1/</id>
        <link href="https://fxw97.github.io/post/python-visualization1/">
        </link>
        <updated>2022-06-27T23:11:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="python可视化基础散点图">Python可视化:基础散点图</h1>
<p><strong>—matplotlib绘制基础散点图</strong></p>
<h2 id="内容概要">内容概要</h2>
<p>散点图常用来描述两个连续型变量间的关系，本期内容将介绍使用 Python 强大的绘图第三方库 <strong>matplotlib</strong> 绘制基础散点图，并展开介绍如何对散点图进行美化。使用的示例数据集是 penguins，数据包含了不同种类企鹅的嘴长度和嘴厚度，我们拟对不同种类企鹅的嘴和嘴厚进行绘制散点图，来探究企鹅嘴长与嘴厚度之间是否有联系。需要本案例数据和完整代码的于公众号后台回复<strong>20220614-1</strong>即可。</p>
<hr>
<h2 id="作图数据">作图数据</h2>
<p>导入 pandas 和 matplotlib 库，读取原始数据，查看原始数据组成如下:</p>
<pre><code class="language-Python">import pandas as pd
import matplotlib.pyplot as plt

#设置绘图字体为微软雅黑
plt.rcParams['font.sans-serif'] =  'Microsoft YaHei'

df = pd.read_csv('penguins.csv')
print(df.head(5))
print(df.info())
</code></pre>
<p>输出:<br>
<img src="https://fxw97.github.io//post-images/1656372448252.jpg" alt="" loading="lazy"><br>
原始数据为 344 行 ×8 列，企鹅嘴长和嘴厚数据列名分别为 bill_length_mm 和 bill_depth_mm，每列中含有两个缺失值。</p>
<p>接下来将缺失值进行剔除，并提取三类企鹅的嘴长和嘴厚数据，保存到后续绘图 x，y 变量中：</p>
<pre><code class="language-Python">df = df.dropna()

# 分三类提取绘图数据
df1 = df[df['species']=='Adelie']
x1 = df1['bill_length_mm']
y1 = df1['bill_depth_mm']

df2 = df[df['species']=='Chinstrap']
x2 = df2['bill_length_mm']
y2 = df2['bill_depth_mm']

df3 = df[df['species']=='Gentoo']
x3 = df3['bill_length_mm']
y3 = df3['bill_depth_mm']
</code></pre>
<hr>
<h2 id="绘图代码">绘图代码</h2>
<p>使用 matplotlib 中的 scatter()函数绘制散点图，分别传入三类企鹅的嘴长 x 和嘴厚 y 数据，即可绘制最基础的散点图，其中将企鹅种类名称传入 label=...中，是为了后续构建图例；还可传入 c=...来指定绘图颜色，这里未指定 c，则默认依次使用 matplotlib 默认的颜色'C0'。</p>
<pre><code class="language-Python">plt.scatter(x1,y1,label='Adelie')
plt.scatter(x2,y2,label='Chinstrap')
plt.scatter(x3,y3,label='Gentoo')
plt.show()
</code></pre>
<p>输出:<br>
<img src="https://fxw97.github.io//post-images/1656372659864.png" alt="" loading="lazy"></p>
<p>进一步对散点图进行美化，包括以下四部分：</p>
<ol>
<li>x，y 轴刻度范围和刻度位置进行调整</li>
<li>添加 x，y 轴名称，并更改颜色和字体粗细</li>
<li>添加网格线，设置线型为虚线，不透明度为 60%</li>
<li>设置图例，取消边框，更改图例字体大小，更改图例标题的字体大小和粗细，更改图例标签的大小</li>
</ol>
<pre><code class="language-Python">#第1部分
plt.xlim(22,68)
plt.xticks(range(25,70,5),fontsize=10)
plt.ylim(9,26)
plt.yticks([10,15,20,25],fontsize=10)
#第2部分
plt.xlabel('企鹅嘴长(mm)',fontsize=12,c='purple',fontweight='bold')
plt.ylabel('企鹅嘴厚(mm)',fontsize=12,c='purple',fontweight='bold')
#第3部分
plt.grid(ls='--',alpha=0.6)
#第4部分
plt.legend(title='Species',frameon=False,fontsize=10,title_fontproperties={'size':12,'weight':'bold'})


plt.tight_layout() #缩小图形四周留白
plt.savefig('1.scatter.jpg',dpi=600) #并保存图片到本地
plt.show()
</code></pre>
<p>最终保存的散点图如下:<br>
<img src="https://fxw97.github.io//post-images/1656372678410.png" alt="" loading="lazy"></p>
<p>以上便是使用 matplotlib 绘制基础散点图的相关内容，可结合同期推文—R 语言可视化：基础散点图，来同时对比学习使用 ggplot2 绘制散点图。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用geopandas提取地理信息数据并绘制地图]]></title>
        <id>https://fxw97.github.io/post/geopandas1/</id>
        <link href="https://fxw97.github.io/post/geopandas1/">
        </link>
        <updated>2022-06-16T23:51:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="使用geopandas提取地理信息数据并绘制地图">使用geopandas提取地理信息数据并绘制地图</h1>
<p><strong>—Python提取目标区域geojson数据，转换为shp文件并绘制地图</strong></p>
<h2 id="内容概要">内容概要</h2>
<p>geopandas是建立在GEOS、GDAL、PROJ等开源地理空间计算相关框架之上，类似pandas语法风格的空间数据分析Python库，其能简化地理空间数据处理，减少对Arcgis等工具的依赖，使得处理地理空间数据变得更加高效简洁，打造纯Python式的空间数据处理工作流程。本案例是近期我遇到的一个实际需求，需要从广东省的geojson地理信息数据中，提取出珠三角城市群的数据，然后保存为shp文件绘制地图。需要本案例数据和代码的在公众号对话框回复<strong>20220618</strong>即可获取。</p>
<p>广东省及各子城市的geojson地理信息数据可从DataV.GeoAtlas平台进行免费下载，网址如下：</p>
<pre><code>url:http://datav.aliyun.com/portal/school/atlas/area_selector
</code></pre>
<p>具体操作过程如下图所示：<br>
<img src="https://fxw97.github.io//post-images/1655680261545.png" alt="" loading="lazy"><br>
选中广东省区域地图，下载保存json文件到本地电脑即可。</p>
<p>珠江三角洲城市群包括广州市、佛山市、肇庆市、深圳市、东莞市、惠州市、珠海市、中山市和江门市等九个城市地区。下面将分两小节详细介绍如何从geojson数据中提取珠三角城市群数据保存为shp文件并绘制地图。</p>
<hr>
<h2 id="1提取目标区域geojson数据">1.提取目标区域geojson数据</h2>
<p>导入需要使用的库和原始geojson数据，打印输出原始数据组成：</p>
<pre><code class="language-python">import geopandas as gpd
import matplotlib.pyplot as plt
import pandas as pd
from shapely import geometry
import os

plt.rcParams['font.sans-serif'] = 'Microsoft YaHei' # 设置字体为微软雅黑
# 使打印输出显示更全
pd.set_option('display.max_columns',500)
pd.set_option('display.width',1000)

# 读取广东省geojson数据
data = gpd.read_file('guangdong.json') 
print(data)
</code></pre>
<p>输出：<br>
<img src="https://fxw97.github.io//post-images/1655680285572.png" alt="" loading="lazy"><br>
原始数据包含了广东省所有21个城市的地理信息数据。</p>
<p>接下来提取属于珠三角城市群的数据:</p>
<pre><code class="language-python">prd_city = ['广州市','佛山市','肇庆市',
            '深圳市','东莞市','惠州市',
            '珠海市','中山市','江门市']
prd_city_english = ['guangzhou','foshan','zhaoqing',
                    'shenzhen','dongguan','huizhou',
                    'zhuhai','zhongshan','jiangmen']
prd = data[data['name'].isin(prd_city)]
# 将列重命名缩短，防止保存为shp文件时因列名过程导致的警告
prd = prd.rename(columns = {'childrenNum':'childnum','subFeatureIndex':'rawIndex'}) 
print(prd)
</code></pre>
<p>输出结果：<br>
<img src="https://fxw97.github.io//post-images/1655680293446.png" alt="" loading="lazy"><br>
成功提取出珠三角9个城市的geojson数据。</p>
<p>接下来将其转换为shp文件、保存到本地电脑:</p>
<pre><code class="language-python"># 创建一个储存shp文件的文件夹
if not os.path.exists('PRD'):
    os.mkdir('PRD')
# 保存为shp文件
prd.to_file('PRD/PRD.shp',
             driver='ESRI Shapefile',
             encoding='utf-8')
</code></pre>
<p>查看本地电脑上保存的shp文件：<br>
<img src="https://fxw97.github.io//post-images/1655680301172.png" alt="" loading="lazy"><br>
这里需要注意，一个完整的shp文件必须包含cpg、dbf、prj、shp和shx等五个文件，之后移动shp文件导入到Arcgis或Qgis时需要一起完整地移动这五个文件，确保其在同一个文件夹中，否则会读取失败。</p>
<hr>
<h2 id="2绘制珠三角城市群地图">2.绘制珠三角城市群地图</h2>
<p>使用上述保存在prd变量中的珠三角城市群geojson数据进行绘制地图：</p>
<pre><code class="language-python"># 绘制地图
fig,ax = plt.subplots(figsize=(8,6))
colors =  ['C0','C1','C2','C3','C4','C5','C6','C7','C8','C9']
p = prd.plot(ax=ax,color=colors,scheme=&quot;quantiles&quot;,edgecolor='grey',alpha=0.8,label=prd_city)
# 设置经纬度范围
ax.set_ylim(21.5,24.5)
ax.set_xlim(111,115.5)
# 设置轴标签为经纬度
ax.set_xticks(range(111,116,1),[str(x)+'°E' for x in range(111,116,1)])
ax.set_yticks(range(22,25,1),[str(x)+'°N' for x in range(22,25,1)])
# 给每块地图区域添加城市名称
for x, y, label in zip(prd.representative_point().x, prd.representative_point().y, prd['name']):
    ax.text(x-0.1, y, label, fontsize=10)

# 根据研究站点的经纬度，将其添加到地图上
GZ = gpd.GeoSeries([geometry.Point([113.5, 23.5])],crs='EPSG:4326')
FS = gpd.GeoSeries([geometry.Point([113, 23])],crs='EPSG:4326')
GZ.plot(ax=ax,marker='*',color='r',markersize=200,label='GZ site')
FS.plot(ax=ax,marker='*',color='b',markersize=200,label='FS site')

#设置网格线图例和标题
ax.grid(ls='--',alpha=0.8)
ax.legend(frameon=False)
ax.set_title('珠三角城市群',color='grey',fontsize=20,fontweight='bold')

# 保存输出图形
plt.tight_layout()
plt.savefig('PRD/珠三角城市群.png',dpi=600)
plt.show()
</code></pre>
<p>绘图结果:<br>
<img src="https://fxw97.github.io//post-images/1655680310318.png" alt="" loading="lazy"></p>
<p>以上就是本文的全部内容，关于geopandas下一篇文章，我将介绍如何根据污染物浓度水平对各城市地图进行不同颜色的映射插值。</p>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[个人简介]]></title>
        <id>https://fxw97.github.io/post/cv/</id>
        <link href="https://fxw97.github.io/post/cv/">
        </link>
        <updated>2022-06-14T12:54:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="个人简历">个人简历</h1>
<figure data-type="image" tabindex="1"><img src="https://fxw97.github.io//post-images/1655213303943.jpg" alt="" width="200" height="230" loading="lazy"></figure>
<h2 id="基本信息">基本信息</h2>
<ul>
<li><strong>姓名:</strong> 付学威</li>
<li><strong>性别:</strong> 男</li>
<li><strong>出生日期:</strong> 1997/03/21</li>
<li><strong>国家:</strong> 中华人民共和国</li>
<li><strong>名族:</strong> 汉族</li>
<li><strong>邮箱:</strong> 1550505935@qq.com</li>
<li><strong>个人公众号:</strong> 大气化学python笔记</li>
</ul>
<h2 id="教育经历">教育经历</h2>
<h2 id="证书与技能">证书与技能</h2>
<h2 id="荣誉奖励">荣誉奖励</h2>
<h2 id="论文发表">论文发表</h2>
<h2 id="学术会议">学术会议</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://fxw97.github.io/post/hello-gridea/</id>
        <link href="https://fxw97.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>